document.addEventListener('DOMContentLoaded', () => {
  const supabaseClient = window.supabaseClient;

  const createListingForm = document.getElementById('create-listing-form');
  const sellerNameInput = document.getElementById('seller-name');
  const itemNameInput = document.getElementById('item-name');
  const itemPriceInput = document.getElementById('item-price');
  const pickupLocationInput = document.getElementById('pickup-location');
  const listingsList = document.getElementById('listings-list');
  const purchaseInfo = document.getElementById('purchase-info');

  let currentUser = null;

  async function loadUser() {
    const {
      data: { user },
      error,
    } = await supabaseClient.auth.getUser();

    if (error || !user) {
      currentUser = null;
      sellerNameInput.value = '';
      sellerNameInput.disabled = true;
      return;
    }

    currentUser = user;

    const { data, error: profileError } = await supabaseClient
      .from('users')
      .select('username')
      .eq('id', user.id)
      .single();

    if (profileError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError.message);
      sellerNameInput.value = '';
      sellerNameInput.disabled = false;
    } else {
      sellerNameInput.value = data.username;
      sellerNameInput.disabled = true;
    }
  }

  async function loadListings() {
    const { data, error } = await supabaseClient
      .from('trades')
      .select('id, username, item_name, price, location, created_at, sold')
      .order('created_at', { ascending: false })
      .limit(20);

    if (error) {
      listingsList.innerHTML = '<li>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫</li>';
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error.message);
      return;
    }

    if (!data || data.length === 0) {
      listingsList.innerHTML = '<li>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫</li>';
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const activeListings = data.filter(listing => !listing.sold);

    if (activeListings.length === 0) {
      listingsList.innerHTML = '<li>–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫</li>';
      return;
    }

    listingsList.innerHTML = activeListings
  .map(
    (listing) =>
      `<li>
        <strong>${listing.item_name}</strong> –∑–∞ ${listing.price} üíé<br/>
        –ü—Ä–æ–¥–∞–≤–µ—Ü: ${listing.username}<br/>
        –ú–µ—Å—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏—è: ???<br/>
        <button class="buy-button" data-id="${listing.id}">–ö—É–ø–∏—Ç—å</button>
      </li>`
  )
  .join('');


    // –ù–∞–≤–µ—Å–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ö—É–ø–∏—Ç—å¬ª
    document.querySelectorAll('.buy-button').forEach(button => {
      button.addEventListener('click', () => {
        const tradeId = button.getAttribute('data-id');
        buyListing(tradeId);
      });
    });
  }

  async function buyListing(tradeId) {
  if (!currentUser) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø–æ–∫—É–ø–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã');
    return;
  }

  purchaseInfo.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏...';

  // –í—ã–∑–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const { data, error } = await supabaseClient.rpc('buy_trade', {
    p_buyer_id: currentUser.id,
    p_trade_id: tradeId,
  });

  if (error) {
    alert('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ' + error.message);
    purchaseInfo.textContent = '';
    return;
  }

  if (!data) {
    alert('–ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞—è–≤–∫–∞ —É–∂–µ –ø—Ä–æ–¥–∞–Ω–∞');
    purchaseInfo.textContent = '';
    await loadListings();
    return;
  }

  // data ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å –º–µ—Å—Ç–æ–º –ø–æ–ª—É—á–µ–Ω–∏—è
  purchaseInfo.textContent = `–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ú–µ—Å—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏—è: ${data}`;

  await loadListings();
}

  createListingForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    if (!currentUser) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏');
      return;
    }

    const sellerName = sellerNameInput.value.trim();
    const itemName = itemNameInput.value.trim();
    const itemPrice = parseInt(itemPriceInput.value, 10);
    const pickupLocation = pickupLocationInput.value.trim();

    if (!sellerName || !itemName || !pickupLocation) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    if (isNaN(itemPrice) || itemPrice <= 0) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É');
      return;
    }

    if (itemPrice < 2) {
      alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞—è–≤–∫–∏ ‚Äî 2 –∫—Ä–∏—Å—Ç–∞–ª–ª–∞');
      return;
    }

    const { data: userData, error: userError } = await supabaseClient
      .from('users')
      .select('balance')
      .eq('id', currentUser.id)
      .single();

    if (userError || !userData) {
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å');
      return;
    }

    if (userData.balance < 2) {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (–Ω—É–∂–Ω–æ 2)');
      return;
    }

    const { error } = await supabaseClient.rpc('create_trade', {
      p_user_id: currentUser.id,
      p_username: sellerName,
      p_item_name: itemName,
      p_price: itemPrice,
      p_location: pickupLocation,
    });

    if (error) {
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: ' + error.message);
      return;
    }

    alert('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –°–ø–∏—Å–∞–Ω–æ 2 –∫—Ä–∏—Å—Ç–∞–ª–ª–∞.');

    itemNameInput.value = '';
    itemPriceInput.value = '';
    pickupLocationInput.value = '';

    await loadListings();
  });

  (async () => {
    await loadUser();
    await loadListings();
  })();
});

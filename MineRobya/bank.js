

const supabaseClient = window.supabaseClient;

document.addEventListener('DOMContentLoaded', () => {
  const transferForm = document.getElementById('transfer-form');
  const transferRecipientInput = document.getElementById('transfer-recipient');
  const transferAmountInput = document.getElementById('transfer-amount');
  const userBalanceSpan = document.getElementById('balance-value');
  const userNameSpan = document.getElementById('user-name');
  const topList = document.getElementById('top-list');

  let currentUser = null;


  async function loadUser() {
    const {
      data: { user },
      error,
    } = await supabaseClient.auth.getUser();

    if (error || !user) {
      currentUser = null;
      userNameSpan.textContent = '';
      userBalanceSpan.textContent = '0';
      return;
    }

    currentUser = user;

   
    const { data, error: profileError } = await supabaseClient
      .from('users')
      .select('username, balance')
      .eq('id', user.id)
      .single();

    if (profileError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError.message);
      userNameSpan.textContent = user.email || '–ò–≥—Ä–æ–∫';
      userBalanceSpan.textContent = '?';
    } else {
      userNameSpan.textContent = data.username;
      userBalanceSpan.textContent = data.balance;
    }
  }


  transferForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    if (!currentUser) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã');
      return;
    }

    const recipientName = transferRecipientInput.value.trim();
    const amount = parseInt(transferAmountInput.value, 10);

    if (!recipientName) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
      return;
    }
    if (isNaN(amount) || amount <= 0) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
      return;
    }

   
    const { error } = await supabaseClient.rpc('transfer_crystals', {
      sender: currentUser.id,
      recipient_name: recipientName,
      amount,
    });

    if (error) {
      alert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ' + error.message);
    } else {
      alert(`–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${amount} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –∏–≥—Ä–æ–∫—É ${recipientName}`);
   
      transferRecipientInput.value = '';
      transferAmountInput.value = '';
    
      await loadUser();
      
      await loadTopBalance();
    }
  });

 
  async function loadTopBalance() {
    const { data, error } = await supabaseClient
      .from('users')
      .select('username, balance')
      .order('balance', { ascending: false })
      .limit(10);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞:', error.message);
      topList.innerHTML = '<li>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞</li>';
      return;
    }

    if (!data || data.length === 0) {
      topList.innerHTML = '<li>–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</li>';
      return;
    }

    topList.innerHTML = data
      .map(
        (user, index) =>
          `<li>${index + 1}. ${user.username} ‚Äî ${user.balance} üíé</li>`
      )
      .join('');
  }


  (async () => {
    await loadUser();
    await loadTopBalance();
  })();
});

